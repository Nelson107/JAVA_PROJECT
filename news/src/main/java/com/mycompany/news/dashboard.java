/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.news;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.bson.Document;
import org.bson.types.Binary;

/**
 *
 * @author jevan
 */
public class dashboard extends javax.swing.JFrame {

    /**
     * Creates new form dashboard
     */
    public dashboard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton3.setText("LOG OUT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("SCIENCE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setText("SPORTS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("GLOBAL");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("NEWS");

        jButton2.setText("POLITICS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton6.setText("ALL ");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(19, 19, 19)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(7, 7, 7))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(52, 52, 52))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jButton6)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(143, 143, 143))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addGap(33, 33, 33)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(76, 76, 76))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        String URI = "mongodb+srv://jevajevs7:fI8PCElrECICvLbN@cluster0.0xfus.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        try (MongoClient mongoClient = MongoClients.create(URI)) {
        MongoDatabase database = mongoClient.getDatabase("news");
        MongoCollection<Document> collection = database.getCollection("politics");

        // Fetch 20 random documents from the collection using aggregation
        AggregateIterable<Document> randomDocuments = collection.aggregate(
                Arrays.asList(
                        new Document("$sample", new Document("size", 20))  // Sample 20 random documents
                )
        );

        // Create a new JFrame to display the images and titles
        JFrame displayFrame = new JFrame("POLITICS");
        displayFrame.setSize(600, 600); 
        displayFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
        displayFrame.setLocationRelativeTo(null); 

        // Create a JPanel to hold all the content
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS)); 
        panel.setBackground(Color.WHITE); 
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); 

        // Loop through the random documents and add each image and title
        for (Document document : randomDocuments) {
            String title = document.getString("title");
            String description = document.getString("description");
            Binary imageData = document.get("imageData", Binary.class);

            JPanel imagePanel = new JPanel();
            imagePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5)); 
            imagePanel.setBackground(Color.LIGHT_GRAY); 
            imagePanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1)); 

            byte[] bytes = imageData.getData();
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
            BufferedImage bufferedImage = ImageIO.read(byteArrayInputStream);
            ImageIcon imageIcon = new ImageIcon(bufferedImage.getScaledInstance(150, 120, Image.SCALE_SMOOTH));

            JLabel imageLabel = new JLabel(imageIcon); 
            imagePanel.add(imageLabel); 

            JLabel titleLabel = new JLabel("<html><u>" + title + "</u></html>");
            titleLabel.setFont(new Font("Arial", Font.BOLD, 14)); 
            titleLabel.setForeground(Color.BLUE);
            titleLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 

            titleLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    details b = new details();
                    b.showDetailView(title, description, bufferedImage);
                }
            });

            imagePanel.add(titleLabel); 
            panel.add(imagePanel);
            panel.add(Box.createVerticalStrut(5));  
        }

        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); 
        scrollPane.setPreferredSize(new Dimension(560, 500));
        displayFrame.add(scrollPane);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setBackground(Color.WHITE); 
        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(e -> displayFrame.dispose()); 
        buttonPanel.add(closeButton);
        displayFrame.add(buttonPanel, BorderLayout.SOUTH);

        displayFrame.setVisible(true);
        
        mongoClient.close();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Error displaying images: " + ex.getMessage());
    }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        String URI = "mongodb+srv://jevajevs7:fI8PCElrECICvLbN@cluster0.0xfus.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
    try (MongoClient mongoClient = MongoClients.create(URI)) {
        MongoDatabase database = mongoClient.getDatabase("news");
        MongoCollection<Document> collection = database.getCollection("science");

        // Fetch 20 random documents from the collection using aggregation
        AggregateIterable<Document> randomDocuments = collection.aggregate(
                Arrays.asList(
                        new Document("$sample", new Document("size", 20))  // Sample 20 random documents
                )
        );

        // Create a new JFrame to display the images and titles
        JFrame displayFrame = new JFrame("Random Images and Titles");
        displayFrame.setSize(600, 600); 
        displayFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
        displayFrame.setLocationRelativeTo(null); 

        // Create a JPanel to hold all the content
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS)); 
        panel.setBackground(Color.WHITE); 
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); 

        // Loop through the random documents and add each image and title
        for (Document document : randomDocuments) {
            String title = document.getString("title");
            String description = document.getString("description");
            Binary imageData = document.get("imageData", Binary.class);

            JPanel imagePanel = new JPanel();
            imagePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5)); 
            imagePanel.setBackground(Color.LIGHT_GRAY); 
            imagePanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1)); 

            byte[] bytes = imageData.getData();
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
            BufferedImage bufferedImage = ImageIO.read(byteArrayInputStream);
            ImageIcon imageIcon = new ImageIcon(bufferedImage.getScaledInstance(150, 120, Image.SCALE_SMOOTH));

            JLabel imageLabel = new JLabel(imageIcon); 
            imagePanel.add(imageLabel); 

            JLabel titleLabel = new JLabel("<html><u>" + title + "</u></html>");
            titleLabel.setFont(new Font("Arial", Font.BOLD, 14)); 
            titleLabel.setForeground(Color.BLUE);
            titleLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 

            titleLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    details b = new details();
                    b.showDetailView(title, description, bufferedImage);
                }
            });

            imagePanel.add(titleLabel); 
            panel.add(imagePanel);
            panel.add(Box.createVerticalStrut(5));  
        }

        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); 
        scrollPane.setPreferredSize(new Dimension(560, 500));
        displayFrame.add(scrollPane);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setBackground(Color.WHITE); 
        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(e -> displayFrame.dispose()); 
        buttonPanel.add(closeButton);
        displayFrame.add(buttonPanel, BorderLayout.SOUTH);

        displayFrame.setVisible(true);
        
        mongoClient.close();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Error displaying images: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
         // MongoDB URI (replace with a secure way of loading credentials)
        String URI = "mongodb+srv://jevajevs7:fI8PCElrECICvLbN@cluster0.0xfus.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
        
        try (MongoClient mongoClient = MongoClients.create(URI)) {
            MongoDatabase database = mongoClient.getDatabase("news");
            List<String> collections = Arrays.asList("sports", "politics", "global", "science");
            List<Document> combinedDocuments = new ArrayList<>();
            
            // Gather documents from each collection without limiting to 20 yet
            for (String collectionName : collections) {
                MongoCollection<Document> collection = database.getCollection(collectionName);
                
                // Sample up to 20 documents from each collection (could be less if fewer exist)
                AggregateIterable<Document> sampledDocs = collection.aggregate(
                    Arrays.asList(new Document("$sample", new Document("size", 20)))
                );
                
                for (Document doc : sampledDocs) {
                    combinedDocuments.add(doc);
                }
            }
            
            // Shuffle the combined list to mix documents from different collections
            Collections.shuffle(combinedDocuments);

            // Limit to the first 20 documents after shuffling
            combinedDocuments = combinedDocuments.subList(0, Math.min(20, combinedDocuments.size()));
            
            if (combinedDocuments.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No data found in any collection.");
                return;
            }

            // Set up JFrame for display
            JFrame displayFrame = new JFrame("Random Images and Titles");
            displayFrame.setSize(600, 600);
            displayFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            displayFrame.setLocationRelativeTo(null);

            JPanel panel = new JPanel();
            panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
            panel.setBackground(Color.WHITE);
            panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

            // Display images and titles in JPanel
            for (Document document : combinedDocuments) {
                String title = document.getString("title");
                String description = document.getString("description");
                Binary imageData = document.get("imageData", Binary.class);

                JPanel imagePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 5));
                imagePanel.setBackground(Color.LIGHT_GRAY);
                imagePanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));

                // Convert binary image data to BufferedImage
                byte[] bytes = imageData.getData();
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
                BufferedImage bufferedImage = ImageIO.read(byteArrayInputStream);
                ImageIcon imageIcon = new ImageIcon(bufferedImage.getScaledInstance(150, 120, Image.SCALE_SMOOTH));

                JLabel imageLabel = new JLabel(imageIcon);
                imagePanel.add(imageLabel);

                JLabel titleLabel = new JLabel("<html><u>" + title + "</u></html>");
                titleLabel.setFont(new Font("Arial", Font.BOLD, 14));
                titleLabel.setForeground(Color.BLUE);
                titleLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

                // Add mouse listener to display details on click
                titleLabel.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        details c = new details();
                        c.showDetailView(title, description, bufferedImage);
                    }
                });

                imagePanel.add(titleLabel);
                panel.add(imagePanel);
                panel.add(Box.createVerticalStrut(5));
            }

            // Add JPanel to JScrollPane and display
            JScrollPane scrollPane = new JScrollPane(panel);
            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
            scrollPane.setPreferredSize(new Dimension(560, 500));
            displayFrame.add(scrollPane, BorderLayout.CENTER);

            // Close button
            JPanel buttonPanel = new JPanel();
            buttonPanel.setBackground(Color.WHITE);
            JButton closeButton = new JButton("Close");
            closeButton.addActionListener(e -> displayFrame.dispose());
            buttonPanel.add(closeButton);
            displayFrame.add(buttonPanel, BorderLayout.SOUTH);

            displayFrame.setVisible(true);
            mongoClient.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error displaying images: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String URI = "mongodb+srv://jevajevs7:fI8PCElrECICvLbN@cluster0.0xfus.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
    try (MongoClient mongoClient = MongoClients.create(URI)) {
        MongoDatabase database = mongoClient.getDatabase("news");
        MongoCollection<Document> collection = database.getCollection("sports");

        // Fetch 20 random documents from the collection using aggregation
        AggregateIterable<Document> randomDocuments = collection.aggregate(
                Arrays.asList(
                        new Document("$sample", new Document("size", 20))  // Sample 20 random documents
                )
        );

        // Create a new JFrame to display the images and titles
        JFrame displayFrame = new JFrame("SPORTS");
        displayFrame.setSize(600, 600); 
        displayFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
        displayFrame.setLocationRelativeTo(null); 

        // Create a JPanel to hold all the content
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS)); 
        panel.setBackground(Color.WHITE); 
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); 

        // Loop through the random documents and add each image and title
        for (Document document : randomDocuments) {
            String title = document.getString("title");
            String description = document.getString("description");
            Binary imageData = document.get("imageData", Binary.class);

            JPanel imagePanel = new JPanel();
            imagePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5)); 
            imagePanel.setBackground(Color.LIGHT_GRAY); 
            imagePanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1)); 

            byte[] bytes = imageData.getData();
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
            BufferedImage bufferedImage = ImageIO.read(byteArrayInputStream);
            ImageIcon imageIcon = new ImageIcon(bufferedImage.getScaledInstance(150, 120, Image.SCALE_SMOOTH));

            JLabel imageLabel = new JLabel(imageIcon); 
            imagePanel.add(imageLabel); 

            JLabel titleLabel = new JLabel("<html><u>" + title + "</u></html>");
            titleLabel.setFont(new Font("Arial", Font.BOLD, 14)); 
            titleLabel.setForeground(Color.BLUE);
            titleLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 

            titleLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    details b = new details();
                    b.showDetailView(title, description, bufferedImage);
                }
            });

            imagePanel.add(titleLabel); 
            panel.add(imagePanel);
            panel.add(Box.createVerticalStrut(5));  
        }

        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); 
        scrollPane.setPreferredSize(new Dimension(560, 500));
        displayFrame.add(scrollPane);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setBackground(Color.WHITE); 
        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(e -> displayFrame.dispose()); 
        buttonPanel.add(closeButton);
        displayFrame.add(buttonPanel, BorderLayout.SOUTH);

        displayFrame.setVisible(true);
        
        mongoClient.close();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Error displaying images: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        String URI = "mongodb+srv://jevajevs7:fI8PCElrECICvLbN@cluster0.0xfus.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
    try (MongoClient mongoClient = MongoClients.create(URI)) {
        MongoDatabase database = mongoClient.getDatabase("news");
        MongoCollection<Document> collection = database.getCollection("global");

        // Fetch 20 random documents from the collection using aggregation
        AggregateIterable<Document> randomDocuments = collection.aggregate(
                Arrays.asList(
                        new Document("$sample", new Document("size", 20))  // Sample 20 random documents
                )
        );

        // Create a new JFrame to display the images and titles
        JFrame displayFrame = new JFrame("GLOBAL NEWS");
        displayFrame.setSize(600, 600); 
        displayFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
        displayFrame.setLocationRelativeTo(null); 

        // Create a JPanel to hold all the content
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS)); 
        panel.setBackground(Color.WHITE); 
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); 

        // Loop through the random documents and add each image and title
        for (Document document : randomDocuments) {
            String title = document.getString("title");
            String description = document.getString("description");
            Binary imageData = document.get("imageData", Binary.class);

            JPanel imagePanel = new JPanel();
            imagePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5)); 
            imagePanel.setBackground(Color.LIGHT_GRAY); 
            imagePanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1)); 

            byte[] bytes = imageData.getData();
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
            BufferedImage bufferedImage = ImageIO.read(byteArrayInputStream);
            ImageIcon imageIcon = new ImageIcon(bufferedImage.getScaledInstance(150, 120, Image.SCALE_SMOOTH));

            JLabel imageLabel = new JLabel(imageIcon); 
            imagePanel.add(imageLabel); 

            JLabel titleLabel = new JLabel("<html><u>" + title + "</u></html>");
            titleLabel.setFont(new Font("Arial", Font.BOLD, 14)); 
            titleLabel.setForeground(Color.BLUE);
            titleLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); 

            titleLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    details b = new details();
                    b.showDetailView(title, description, bufferedImage);
                }
            });

            imagePanel.add(titleLabel); 
            panel.add(imagePanel);
            panel.add(Box.createVerticalStrut(5));  
        }

        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); 
        scrollPane.setPreferredSize(new Dimension(560, 500));
        displayFrame.add(scrollPane);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setBackground(Color.WHITE); 
        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(e -> displayFrame.dispose()); 
        buttonPanel.add(closeButton);
        displayFrame.add(buttonPanel, BorderLayout.SOUTH);

        displayFrame.setVisible(true);
        
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Error displaying images: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        login z = new login();
        z.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
